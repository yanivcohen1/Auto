'use strict';
var app = angular.module('exampleApp', ['ngRoute', 'ngCookies', 'ngTable', 'ngResource', 'ui.bootstrap', 'angular-loading-bar']);
	app.config(
		[ '$routeProvider', '$locationProvider', '$httpProvider', function($routeProvider, $locationProvider, $httpProvider) {
			
			$routeProvider.when('/create', {
				templateUrl: 'views/create.html',
				controller: 'CreateController',
				secure: true
			});
			
			$routeProvider.when('/edit/:id', {
				templateUrl: 'views/edit.html',
				controller: 'EditController',
				secure: true
			});

			$routeProvider.when('/login', {
				templateUrl: 'views/login.html',
				controller: 'LoginController'
			});
			
			$routeProvider.when('/runTests', {
				templateUrl: 'views/RunTests.html'
			});
			
			/*$routeProvider.otherwise({
				templateUrl: 'app/partials/index.html',
				controller: IndexController
			});*/
			
			$routeProvider
	        .when('/Suites',
	            {
	        		//resolve: resolveController('/app/controllers/SuitesController.js'),
	                controller: 'SuitesController',
	                templateUrl: 'views/Suites.html',
	                secure: true
	            })
	        //Define a route that has a route parameter in it (:suiteID)
	        .when('/tests/:suiteID',
	            {
	                controller: 'TestsController',
	                templateUrl: 'views/Tests.html',
	                secure: true
	            })
	        .when('/newSuite',
	            {
	                controller: 'newSuiteController',
	                templateUrl: 'views/newSuite.html',
	                secure: true
	            })
	        .when('/about', {
		        templateUrl: 'views/about.html',
		        controller: 'FileLoadCtrl',
		        secure: false
		        })
	        .otherwise({ redirectTo: '/runTests' });
			
			//$locationProvider.hashPrefix('!');
			//CORS 
			$httpProvider.defaults.useXDomain = true;
			//$httpProvider.defaults.withCredentials = true;
			/* Register error provider that shows message on failed requests or redirects to login page on
			 * unauthenticated requests */
		    $httpProvider.interceptors.push([ '$q', '$rootScope', '$location', function($q, $rootScope, $location) {
			        return {
			        	'responseError': function(rejection) {
			        		var status = rejection.status;
			        		var config = rejection.config;
			        		var method = config.method;
			        		var url = config.url;
			        		if ($rootScope.loginError == true) {
			        			alert("Login Error");
							}
			        		if (status == 401) {
			        			//$location.path( "/login" );
			        			$rootScope.logout();
			        		} else {
			        			$rootScope.error = method + " on " + url + " failed with status " + status;
			        		}
			              
			        		return $q.reject(rejection);
			        	}
			        };
			    }]
		    );
		    
		    /* Registers auth token interceptor, auth token is either passed by header or by query parameter
		     * as soon as there is an authenticated user */
		    $httpProvider.interceptors.push([ '$q', '$rootScope', '$location', '$routeParams' , function ($q, $rootScope, $location, $routeParams) {
		        return {
		        	'request': function(config) {
		        		var isRestCall = config.url.indexOf('/rest/') != -1;
		        		if (isRestCall && angular.isDefined($rootScope.authToken) ) {//&& !$routeParams.secure
		        			var authToken = $rootScope.authToken;
		        			if (exampleAppConfig.useAuthTokenHeader && $location.absUrl().substr(0, 22) != 'http://localhost:9000/') {
		        				config.headers['X-Auth-Token'] = authToken;
		        			} else {
		        				config.url = config.url + "?token=" + authToken;
		        			}
		        		}
		        		return config || $q.when(config);
		        	}
		        };
		    }]
	    );
		   
		} ]
		
	);
	app.run(['$rootScope', '$location', '$cookieStore', 'UserService', function($rootScope, $location, $cookieStore, UserService) {
		
		/* Reset error when a new view is loaded */
		$rootScope.$on('$viewContentLoaded', function() {
			delete $rootScope.error;
		});
		
	     //Client-side security. Server-side framework MUST add it's 
        //own security as well since client-based security is easily hacked
	    $rootScope.$on("$routeChangeStart", function (event, next, current) {
	        if (next && next.$$route && next.$$route.secure) {
	            if ($rootScope.authToken === undefined) {
	            	$location.replace();
	            	$location.path("/login");
	            }
	        }
	    });
		
		$rootScope.hasRole = function(role) {
			
			if ($rootScope.user === undefined) {
				return false;
			}
			
			if ($rootScope.user.roles[role] === undefined) {
				return false;
			}
			
			return $rootScope.user.roles[role];
		};
		
		$rootScope.logout = function() {
			delete $rootScope.user;
			delete $rootScope.authToken;
			delete $rootScope.loginError;
			$cookieStore.remove('authToken');
			$location.path("/login");
		};
		
		 /* Try getting valid user from cookie or go to login page */
		var originalPath = $location.path();
		
		var authToken = $cookieStore.get('authToken');
		if (authToken !== undefined) {
			$rootScope.authToken = authToken;
			UserService.resoutce.get(function(user) {
				$rootScope.user = user;
				$location.path(originalPath);
			});
		} else {
			$location.path("/runTests");
		}
		
		$rootScope.initialized = true;
	}]);


app.controller('IndexController', [ '$scope', 'NewsService', function($scope, NewsService) {
	
	$scope.newsEntries = NewsService.query();
	
	$scope.deleteEntry = function(newsEntry) {
		newsEntry.$remove(function() {
			$scope.newsEntries = NewsService.query();
		});
	};
}]);


app.controller('EditController', [ '$scope', '$routeParams', '$location', 'NewsService', function($scope, $routeParams, $location, NewsService) {
	$scope.newsEntry = NewsService.get({id: $routeParams.id});
	
	$scope.save = function() {
		$scope.newsEntry.$save(function() {
			$location.path('/');
		});
	};
}]);


//function CreateController($scope, $location, NewsService) {
app.controller('CreateController', [ '$scope', '$location', 'NewsService', function($scope, $location, NewsService) {
	$scope.newsEntry = new NewsService();
	
	$scope.save = function() {
		$scope.newsEntry.$save(function() {
			$location.path('/');
		});
	};
}]);


app.controller('LoginController', [ '$scope', '$rootScope', '$location', '$cookieStore', 'UserService', function($scope, $rootScope, $location, $cookieStore, UserService) {
	$scope.rememberMe = false;
	
	$scope.login = function() {
		$rootScope.loginError = true;
		UserService.resoutce.authenticate($.param({username: $scope.username, password: $scope.password}), function(authenticationResult) {
			$rootScope.loginError = false;
			var authToken = authenticationResult.token;
			$rootScope.authToken = authToken;
			if ($scope.rememberMe) {
				$cookieStore.put('authToken', authToken);
			}
			//$rootScope.user = $scope.username;//
			//window.location.href = '#/Suites';//
			UserService.resoutce.get(function(user) {
				$rootScope.user = user;
				window.location.href = '#/Suites';
				//$location.replace();
				//$location.path("#/Suites");
			});
			
		});
	};
}]);

app.controller('NavbarController', [ '$scope', '$location', function($scope, $location) {
    $scope.getClass = function (path) {
        if ($location.path().substr(0, path.length) == path) {
            return true
        } else {
            return false;
        }
    }
}]);

app.constant("ngAuthSettingsConst", {
    url: "http://localhost:8080/ngSuitesManage-admin",
    domain: '/ngSuitesManage-admin',
    port: "80"
});

//app.constant('ngAuthSettings', {
app.service('ngAuthSettings', function ($location, ngAuthSettingsConst) {
	var temp = '';
	init();
	function init() {
        if ($location.absUrl().substr(0, 22) == 'http://localhost:9000/') {
            temp = ngAuthSettingsConst.url;//-admin
        } else {
            temp = ngAuthSettingsConst.domain;
        };
    };
	
	this.apiServiceBaseUri = temp;

});

//var services = angular.module('exampleApp.services', ['ngResource']);

app.service('UserService', [ '$resource', 'ngAuthSettings', '$location', 'ngAuthSettingsConst', function($resource, ngAuthSettings, $location, ngAuthSettingsConst) {

	function init() {
        if ($location.absUrl().substr(0, 22) == 'http://localhost:9000/') {
            return ngAuthSettingsConst.url;//'http://localhost:8080/ngSuitesManage-admin/';//-admin
        } else {
            return ngAuthSettingsConst.domain;
        };
    };
    
	this.resoutce = $resource(init() +'/rest/user/:action', {},
			{
				authenticate: {
					method: 'POST',
					params: {'action' : 'authenticate'},
					headers : {'Content-Type': 'application/x-www-form-urlencoded'}
				},
			}
		);
}]);


app.factory('NewsService', [ '$resource', 'ngAuthSettings', function($resource, ngAuthSettings) {
	return $resource(ngAuthSettings.apiServiceBaseUri + '/rest/news/:id', {id: '@id'});
}]);

app.factory('SuiteFactory', [ '$resource', 'ngAuthSettings', function($resource, ngAuthSettings) {
    return $resource(ngAuthSettings.apiServiceBaseUri +'/rest/suites/:id', { id: '@id' }, {
        update: {
            method: 'PUT', // this method issues a PUT request
            headers : {'Content-Type': 'application/x-www-form-urlencoded'}
          }
    });

}]);

app.factory('ManualFactory', [ '$resource', 'ngAuthSettings', function($resource, ngAuthSettings) {
	return $resource(ngAuthSettings.apiServiceBaseUri +'/rest/manual/', {}, {
        list: {method:'GET', params:{}, isArray:true}
    });
	//return $resource('rest/manual/');
}]);