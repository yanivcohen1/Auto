package com.who.tlv.ServicesWebsites.server;

import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpSession;
import com.who.tlv.ServicesWebsites.client.GreetingService;
import com.who.tlv.ServicesWebsites.shared.FieldVerifier;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;

/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class GreetingServiceImpl extends RemoteServiceServlet implements GreetingService {

	private Map<String, HttpSession> HttpSessions = new HashMap<String, HttpSession>();
	private Map<String, Object> MapObjects = new HashMap<String, Object>();
	//private SynchronizedWait SW; 
	
	public String greetServer(String input) throws IllegalArgumentException {
		// Verify that the input is valid. 
		if (!FieldVerifier.isValidName(input)) {
			// If the input is not valid, throw an IllegalArgumentException back to
			// the client.
			throw new IllegalArgumentException("Name must be at least 1 characters long");
		}
		return input;	
	}
	
	/**
	 * Escape an html string. Escaping data received from the client helps to
	 * prevent cross-site script vulnerabilities.
	 * 
	 * @param html the html string to escape
	 * @return the escaped string
	 */
	private String escapeHtml(String html) {
		if (html == null) {
			return null;
		}
		return html.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;");
	}

	@Override
	public String Stop(String name) throws IllegalArgumentException {
		
		String ID = getThreadLocalRequest().getSession().getId();
		String ReturnText = "";
		if (HttpSessions.containsKey(ID)) {
			Executor _ExeTest = (Executor)MapObjects.get(ID);
			ReturnText = _ExeTest.Terminate();
		}
		return ReturnText;
	}

	public void LockReqX(String[] args) throws IllegalArgumentException {

		String ID = getThreadLocalRequest().getSession().getId();
		if (!HttpSessions.containsKey(ID)) {
			HttpSessions.put(ID, getThreadLocalRequest().getSession());
			//System.console().printf("%1$10s%n", ID);
			//RequstX RequstX1 = new RequstX();
			//RequstX1.Start();
			//String[] args = new String[]{"9000","java","-jar C:\\Web\\runner.jar"};
			Executor _ExeTest = new Executor();
			MapObjects.put(ID, _ExeTest);
			_ExeTest.main(args);
			HttpSessions.remove(ID);
			MapObjects.remove(ID);
			//SynchronizedWait SW = new SynchronizedWait();
			//SW.setname("");
		}
	}

	@Override
	public String GetData(String name) throws IllegalArgumentException {
		String ID = getThreadLocalRequest().getSession().getId();
		String ReturnText = "";
		if (HttpSessions.containsKey(ID)) {
			Executor _ExeTest = (Executor)MapObjects.get(ID);
			try {
				ReturnText = _ExeTest.GetText();
				if (ReturnText == null) {
					ReturnText = "";
				}
			} catch (InterruptedException e) {
				throw new IllegalArgumentException("Name must be at least 1 characters long");
			}
		}
		return ReturnText;
	}
}


//String serverInfo = getServletContext().getServerInfo();
//String userAgent = getThreadLocalRequest().getHeader("User-Agent");
//
//// Escape data from the client to avoid cross-site script vulnerabilities.
//input = escapeHtml(input);
//userAgent = escapeHtml(userAgent);
//return "Hello, " + input + "!<br><br>I am running " + serverInfo + ".<br><br>It looks like you are using:<br>" + userAgent;